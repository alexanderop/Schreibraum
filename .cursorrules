# Rules for this Project

## TypeScript Best Practices
- Use strict type-checking and `noImplicitAny`
- Create narrow, specific types over general ones
- Prefer discriminated unions over optional properties
- Use `unknown` over `any`
- Leverage template literal types 
- Use `satisfies` with `as const` for type-safe constants
- Avoid type assertions (`as`)
- always use '' instead of "" for strings

## Rules for Testing
- Create DSL in separate test files
- Follow TDD for new business logic
- Check existing feature tests first

## Vue Props
```ts
const { 
  title = 'Default',  
  active = false 
} = defineProps<{
  title?: string
  active?: boolean
}>()
```

## Template Refs
```ts
const modalRef = useTemplateRef('modal')
```

## Unique IDs
```ts
const fieldId = useId()
```

## Commit Messages
```
feat: add feature
fix: bug fix
docs: update docs
style: formatting
refactor: restructure code
perf: performance
test: add tests
```

Breaking changes:
- Add `!` after type or
- Add `BREAKING CHANGE:` footer